group 'com.webank.fabric.front'
version '1.0-SNAPSHOT'

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'


sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    maven {url "http://maven.aliyun.com/nexus/content/groups/public/"}
    mavenLocal()
    mavenCentral()
}

def springboot_version="2.2.2.RELEASE"
List springboot = [
        "org.springframework.boot:spring-boot-starter-web:$springboot_version",
        "org.springframework.boot:spring-boot-starter-log4j2:$springboot_version",
]

List fabric = [
        'org.hyperledger.fabric:fabric-gateway-java:1.4.2'
]



List fastjson = ["com.alibaba:fastjson:1.2.54"]
List commons = ["org.apache.commons:commons-lang3:3.8.1"]

List test = ["org.springframework.boot:spring-boot-starter-test:$springboot_version"]
List swagger = [
        'io.springfox:springfox-swagger2:2.8.0',
        'io.springfox:springfox-swagger-ui:2.8.0'
]

dependencies {
    compile springboot,fastjson,commons,swagger,fabric
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
    compileOnly 'org.projectlombok:lombok:1.18.6'

    testCompile test
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

clean {
    delete 'dist'
    delete 'build'
    delete 'log'
}


jar {
    destinationDir file('dist/apps')
    archiveName project.name + '.jar'
    exclude '**/*.xml'
    exclude '**/*.yml'
    exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from file('crypto-config/')
            into 'dist/crypto-config'
        }
        copy {
            from file('network/')
            into 'dist/network'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll{File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env'))}
            into 'dist'
        }
    }
}
